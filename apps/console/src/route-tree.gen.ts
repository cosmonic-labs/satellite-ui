/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './app/__root'
import { Route as RouteImport } from './app/route'
import { Route as toolsToolsRouteImport } from './app/(tools)/tools/route'
import { Route as settingsSetupRouteImport } from './app/(settings)/setup/route'
import { Route as settingsSettingsRouteImport } from './app/(settings)/settings/route'
import { Route as infrastructureInfrastructureRouteImport } from './app/(infrastructure)/infrastructure/route'
import { Route as applicationsApplicationsRouteImport } from './app/(applications)/applications/route'
import { Route as applicationsApplicationsIndexImport } from './app/(applications)/applications/index'
import { Route as linksLinksListImport } from './app/(links)/links/_list'
import { Route as configsConfigsListImport } from './app/(configs)/configs/_list'
import { Route as toolsToolsLatticeTesterRouteImport } from './app/(tools)/tools/lattice-tester/route'
import { Route as settingsSettingsLatticeRouteImport } from './app/(settings)/settings/lattice/route'
import { Route as linksLinksNewRouteImport } from './app/(links)/links/new/route'
import { Route as infrastructureInfrastructureHostsRouteImport } from './app/(infrastructure)/infrastructure/hosts/route'
import { Route as configsConfigsNewRouteImport } from './app/(configs)/configs/new/route'
import { Route as applicationsApplicationsNewRouteImport } from './app/(applications)/applications/new/route'
import { Route as applicationsApplicationsDetailRouteImport } from './app/(applications)/applications/detail/route'
import { Route as linksLinksListIndexRouteImport } from './app/(links)/links/_list.index.route'
import { Route as configsConfigsListIndexRouteImport } from './app/(configs)/configs/_list.index.route'
import { Route as settingsSettingsLatticeLatticeKeyRouteImport } from './app/(settings)/settings/lattice/$latticeKey.route'
import { Route as infrastructureInfrastructureHostsHostIdRouteImport } from './app/(infrastructure)/infrastructure/hosts/$hostId.route'
import { Route as applicationsApplicationsNewTemplateRouteImport } from './app/(applications)/applications/new_.template/route'
import { Route as applicationsApplicationsDetailAppNameRouteImport } from './app/(applications)/applications/detail/$appName.route'
import { Route as configsConfigsListDetailConfigNameRouteImport } from './app/(configs)/configs/_list.detail.$configName/route'

// Create Virtual Routes

const linksLinksImport = createFileRoute('/(links)/links')()
const configsConfigsImport = createFileRoute('/(configs)/configs')()

// Create/Update Routes

const RouteRoute = RouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const linksLinksRoute = linksLinksImport.update({
  id: '/(links)/links',
  path: '/links',
  getParentRoute: () => rootRoute,
} as any)

const configsConfigsRoute = configsConfigsImport.update({
  id: '/(configs)/configs',
  path: '/configs',
  getParentRoute: () => rootRoute,
} as any)

const toolsToolsRouteRoute = toolsToolsRouteImport.update({
  id: '/(tools)/tools',
  path: '/tools',
  getParentRoute: () => rootRoute,
} as any)

const settingsSetupRouteRoute = settingsSetupRouteImport.update({
  id: '/(settings)/setup',
  path: '/setup',
  getParentRoute: () => rootRoute,
} as any)

const settingsSettingsRouteRoute = settingsSettingsRouteImport.update({
  id: '/(settings)/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const infrastructureInfrastructureRouteRoute =
  infrastructureInfrastructureRouteImport.update({
    id: '/(infrastructure)/infrastructure',
    path: '/infrastructure',
    getParentRoute: () => rootRoute,
  } as any)

const applicationsApplicationsRouteRoute = applicationsApplicationsRouteImport
  .update({
    id: '/(applications)/applications',
    path: '/applications',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() =>
    import('./app/(applications)/applications/route.lazy').then((d) => d.Route),
  )

const applicationsApplicationsIndexRoute = applicationsApplicationsIndexImport
  .update({
    id: '/',
    path: '/',
    getParentRoute: () => applicationsApplicationsRouteRoute,
  } as any)
  .lazy(() =>
    import('./app/(applications)/applications/index.lazy').then((d) => d.Route),
  )

const linksLinksListRoute = linksLinksListImport
  .update({
    id: '/_list',
    getParentRoute: () => linksLinksRoute,
  } as any)
  .lazy(() =>
    import('./app/(links)/links/_list.route.lazy').then((d) => d.Route),
  )

const configsConfigsListRoute = configsConfigsListImport
  .update({
    id: '/_list',
    getParentRoute: () => configsConfigsRoute,
  } as any)
  .lazy(() =>
    import('./app/(configs)/configs/_list.route.lazy').then((d) => d.Route),
  )

const toolsToolsLatticeTesterRouteRoute = toolsToolsLatticeTesterRouteImport
  .update({
    id: '/lattice-tester',
    path: '/lattice-tester',
    getParentRoute: () => toolsToolsRouteRoute,
  } as any)
  .lazy(() =>
    import('./app/(tools)/tools/lattice-tester/route.lazy').then(
      (d) => d.Route,
    ),
  )

const settingsSettingsLatticeRouteRoute = settingsSettingsLatticeRouteImport
  .update({
    id: '/lattice',
    path: '/lattice',
    getParentRoute: () => settingsSettingsRouteRoute,
  } as any)
  .lazy(() =>
    import('./app/(settings)/settings/lattice/route.lazy').then((d) => d.Route),
  )

const linksLinksNewRouteRoute = linksLinksNewRouteImport
  .update({
    id: '/(links)/links/new',
    path: '/links/new',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./app/(links)/links/new/route.lazy').then((d) => d.Route))

const infrastructureInfrastructureHostsRouteRoute =
  infrastructureInfrastructureHostsRouteImport
    .update({
      id: '/hosts',
      path: '/hosts',
      getParentRoute: () => infrastructureInfrastructureRouteRoute,
    } as any)
    .lazy(() =>
      import('./app/(infrastructure)/infrastructure/hosts/route.lazy').then(
        (d) => d.Route,
      ),
    )

const configsConfigsNewRouteRoute = configsConfigsNewRouteImport
  .update({
    id: '/(configs)/configs/new',
    path: '/configs/new',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() =>
    import('./app/(configs)/configs/new/route.lazy').then((d) => d.Route),
  )

const applicationsApplicationsNewRouteRoute =
  applicationsApplicationsNewRouteImport
    .update({
      id: '/new',
      path: '/new',
      getParentRoute: () => applicationsApplicationsRouteRoute,
    } as any)
    .lazy(() =>
      import('./app/(applications)/applications/new/route.lazy').then(
        (d) => d.Route,
      ),
    )

const applicationsApplicationsDetailRouteRoute =
  applicationsApplicationsDetailRouteImport.update({
    id: '/detail',
    path: '/detail',
    getParentRoute: () => applicationsApplicationsRouteRoute,
  } as any)

const linksLinksListIndexRouteRoute = linksLinksListIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => linksLinksListRoute,
} as any)

const configsConfigsListIndexRouteRoute =
  configsConfigsListIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => configsConfigsListRoute,
  } as any)

const settingsSettingsLatticeLatticeKeyRouteRoute =
  settingsSettingsLatticeLatticeKeyRouteImport
    .update({
      id: '/$latticeKey',
      path: '/$latticeKey',
      getParentRoute: () => settingsSettingsLatticeRouteRoute,
    } as any)
    .lazy(() =>
      import('./app/(settings)/settings/lattice/$latticeKey.route.lazy').then(
        (d) => d.Route,
      ),
    )

const infrastructureInfrastructureHostsHostIdRouteRoute =
  infrastructureInfrastructureHostsHostIdRouteImport
    .update({
      id: '/$hostId',
      path: '/$hostId',
      getParentRoute: () => infrastructureInfrastructureHostsRouteRoute,
    } as any)
    .lazy(() =>
      import(
        './app/(infrastructure)/infrastructure/hosts/$hostId.route.lazy'
      ).then((d) => d.Route),
    )

const applicationsApplicationsNewTemplateRouteRoute =
  applicationsApplicationsNewTemplateRouteImport
    .update({
      id: '/new_/template',
      path: '/new/template',
      getParentRoute: () => applicationsApplicationsRouteRoute,
    } as any)
    .lazy(() =>
      import('./app/(applications)/applications/new_.template/route.lazy').then(
        (d) => d.Route,
      ),
    )

const applicationsApplicationsDetailAppNameRouteRoute =
  applicationsApplicationsDetailAppNameRouteImport
    .update({
      id: '/$appName',
      path: '/$appName',
      getParentRoute: () => applicationsApplicationsDetailRouteRoute,
    } as any)
    .lazy(() =>
      import('./app/(applications)/applications/detail/$appName.lazy').then(
        (d) => d.Route,
      ),
    )

const configsConfigsListDetailConfigNameRouteRoute =
  configsConfigsListDetailConfigNameRouteImport
    .update({
      id: '/detail/$configName',
      path: '/detail/$configName',
      getParentRoute: () => configsConfigsListRoute,
    } as any)
    .lazy(() =>
      import(
        './app/(configs)/configs/_list.detail.$configName/route.lazy'
      ).then((d) => d.Route),
    )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RouteImport
      parentRoute: typeof rootRoute
    }
    '/(applications)/applications': {
      id: '/(applications)/applications'
      path: '/applications'
      fullPath: '/applications'
      preLoaderRoute: typeof applicationsApplicationsRouteImport
      parentRoute: typeof rootRoute
    }
    '/(infrastructure)/infrastructure': {
      id: '/(infrastructure)/infrastructure'
      path: '/infrastructure'
      fullPath: '/infrastructure'
      preLoaderRoute: typeof infrastructureInfrastructureRouteImport
      parentRoute: typeof rootRoute
    }
    '/(settings)/settings': {
      id: '/(settings)/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof settingsSettingsRouteImport
      parentRoute: typeof rootRoute
    }
    '/(settings)/setup': {
      id: '/(settings)/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof settingsSetupRouteImport
      parentRoute: typeof rootRoute
    }
    '/(tools)/tools': {
      id: '/(tools)/tools'
      path: '/tools'
      fullPath: '/tools'
      preLoaderRoute: typeof toolsToolsRouteImport
      parentRoute: typeof rootRoute
    }
    '/(applications)/applications/detail': {
      id: '/(applications)/applications/detail'
      path: '/detail'
      fullPath: '/applications/detail'
      preLoaderRoute: typeof applicationsApplicationsDetailRouteImport
      parentRoute: typeof applicationsApplicationsRouteImport
    }
    '/(applications)/applications/new': {
      id: '/(applications)/applications/new'
      path: '/new'
      fullPath: '/applications/new'
      preLoaderRoute: typeof applicationsApplicationsNewRouteImport
      parentRoute: typeof applicationsApplicationsRouteImport
    }
    '/(configs)/configs/new': {
      id: '/(configs)/configs/new'
      path: '/configs/new'
      fullPath: '/configs/new'
      preLoaderRoute: typeof configsConfigsNewRouteImport
      parentRoute: typeof rootRoute
    }
    '/(infrastructure)/infrastructure/hosts': {
      id: '/(infrastructure)/infrastructure/hosts'
      path: '/hosts'
      fullPath: '/infrastructure/hosts'
      preLoaderRoute: typeof infrastructureInfrastructureHostsRouteImport
      parentRoute: typeof infrastructureInfrastructureRouteImport
    }
    '/(links)/links/new': {
      id: '/(links)/links/new'
      path: '/links/new'
      fullPath: '/links/new'
      preLoaderRoute: typeof linksLinksNewRouteImport
      parentRoute: typeof rootRoute
    }
    '/(settings)/settings/lattice': {
      id: '/(settings)/settings/lattice'
      path: '/lattice'
      fullPath: '/settings/lattice'
      preLoaderRoute: typeof settingsSettingsLatticeRouteImport
      parentRoute: typeof settingsSettingsRouteImport
    }
    '/(tools)/tools/lattice-tester': {
      id: '/(tools)/tools/lattice-tester'
      path: '/lattice-tester'
      fullPath: '/tools/lattice-tester'
      preLoaderRoute: typeof toolsToolsLatticeTesterRouteImport
      parentRoute: typeof toolsToolsRouteImport
    }
    '/(configs)/configs': {
      id: '/(configs)/configs'
      path: '/configs'
      fullPath: '/configs'
      preLoaderRoute: typeof configsConfigsImport
      parentRoute: typeof rootRoute
    }
    '/(configs)/configs/_list': {
      id: '/(configs)/configs/_list'
      path: '/configs'
      fullPath: '/configs'
      preLoaderRoute: typeof configsConfigsListImport
      parentRoute: typeof configsConfigsRoute
    }
    '/(links)/links': {
      id: '/(links)/links'
      path: '/links'
      fullPath: '/links'
      preLoaderRoute: typeof linksLinksImport
      parentRoute: typeof rootRoute
    }
    '/(links)/links/_list': {
      id: '/(links)/links/_list'
      path: '/links'
      fullPath: '/links'
      preLoaderRoute: typeof linksLinksListImport
      parentRoute: typeof linksLinksRoute
    }
    '/(applications)/applications/': {
      id: '/(applications)/applications/'
      path: '/'
      fullPath: '/applications/'
      preLoaderRoute: typeof applicationsApplicationsIndexImport
      parentRoute: typeof applicationsApplicationsRouteImport
    }
    '/(applications)/applications/detail/$appName': {
      id: '/(applications)/applications/detail/$appName'
      path: '/$appName'
      fullPath: '/applications/detail/$appName'
      preLoaderRoute: typeof applicationsApplicationsDetailAppNameRouteImport
      parentRoute: typeof applicationsApplicationsDetailRouteImport
    }
    '/(applications)/applications/new_/template': {
      id: '/(applications)/applications/new_/template'
      path: '/new/template'
      fullPath: '/applications/new/template'
      preLoaderRoute: typeof applicationsApplicationsNewTemplateRouteImport
      parentRoute: typeof applicationsApplicationsRouteImport
    }
    '/(infrastructure)/infrastructure/hosts/$hostId': {
      id: '/(infrastructure)/infrastructure/hosts/$hostId'
      path: '/$hostId'
      fullPath: '/infrastructure/hosts/$hostId'
      preLoaderRoute: typeof infrastructureInfrastructureHostsHostIdRouteImport
      parentRoute: typeof infrastructureInfrastructureHostsRouteImport
    }
    '/(settings)/settings/lattice/$latticeKey': {
      id: '/(settings)/settings/lattice/$latticeKey'
      path: '/$latticeKey'
      fullPath: '/settings/lattice/$latticeKey'
      preLoaderRoute: typeof settingsSettingsLatticeLatticeKeyRouteImport
      parentRoute: typeof settingsSettingsLatticeRouteImport
    }
    '/(configs)/configs/_list/': {
      id: '/(configs)/configs/_list/'
      path: '/'
      fullPath: '/configs/'
      preLoaderRoute: typeof configsConfigsListIndexRouteImport
      parentRoute: typeof configsConfigsListImport
    }
    '/(links)/links/_list/': {
      id: '/(links)/links/_list/'
      path: '/'
      fullPath: '/links/'
      preLoaderRoute: typeof linksLinksListIndexRouteImport
      parentRoute: typeof linksLinksListImport
    }
    '/(configs)/configs/_list/detail/$configName': {
      id: '/(configs)/configs/_list/detail/$configName'
      path: '/detail/$configName'
      fullPath: '/configs/detail/$configName'
      preLoaderRoute: typeof configsConfigsListDetailConfigNameRouteImport
      parentRoute: typeof configsConfigsListImport
    }
  }
}

// Create and export the route tree

interface applicationsApplicationsDetailRouteRouteChildren {
  applicationsApplicationsDetailAppNameRouteRoute: typeof applicationsApplicationsDetailAppNameRouteRoute
}

const applicationsApplicationsDetailRouteRouteChildren: applicationsApplicationsDetailRouteRouteChildren =
  {
    applicationsApplicationsDetailAppNameRouteRoute:
      applicationsApplicationsDetailAppNameRouteRoute,
  }

const applicationsApplicationsDetailRouteRouteWithChildren =
  applicationsApplicationsDetailRouteRoute._addFileChildren(
    applicationsApplicationsDetailRouteRouteChildren,
  )

interface applicationsApplicationsRouteRouteChildren {
  applicationsApplicationsDetailRouteRoute: typeof applicationsApplicationsDetailRouteRouteWithChildren
  applicationsApplicationsNewRouteRoute: typeof applicationsApplicationsNewRouteRoute
  applicationsApplicationsIndexRoute: typeof applicationsApplicationsIndexRoute
  applicationsApplicationsNewTemplateRouteRoute: typeof applicationsApplicationsNewTemplateRouteRoute
}

const applicationsApplicationsRouteRouteChildren: applicationsApplicationsRouteRouteChildren =
  {
    applicationsApplicationsDetailRouteRoute:
      applicationsApplicationsDetailRouteRouteWithChildren,
    applicationsApplicationsNewRouteRoute:
      applicationsApplicationsNewRouteRoute,
    applicationsApplicationsIndexRoute: applicationsApplicationsIndexRoute,
    applicationsApplicationsNewTemplateRouteRoute:
      applicationsApplicationsNewTemplateRouteRoute,
  }

const applicationsApplicationsRouteRouteWithChildren =
  applicationsApplicationsRouteRoute._addFileChildren(
    applicationsApplicationsRouteRouteChildren,
  )

interface infrastructureInfrastructureHostsRouteRouteChildren {
  infrastructureInfrastructureHostsHostIdRouteRoute: typeof infrastructureInfrastructureHostsHostIdRouteRoute
}

const infrastructureInfrastructureHostsRouteRouteChildren: infrastructureInfrastructureHostsRouteRouteChildren =
  {
    infrastructureInfrastructureHostsHostIdRouteRoute:
      infrastructureInfrastructureHostsHostIdRouteRoute,
  }

const infrastructureInfrastructureHostsRouteRouteWithChildren =
  infrastructureInfrastructureHostsRouteRoute._addFileChildren(
    infrastructureInfrastructureHostsRouteRouteChildren,
  )

interface infrastructureInfrastructureRouteRouteChildren {
  infrastructureInfrastructureHostsRouteRoute: typeof infrastructureInfrastructureHostsRouteRouteWithChildren
}

const infrastructureInfrastructureRouteRouteChildren: infrastructureInfrastructureRouteRouteChildren =
  {
    infrastructureInfrastructureHostsRouteRoute:
      infrastructureInfrastructureHostsRouteRouteWithChildren,
  }

const infrastructureInfrastructureRouteRouteWithChildren =
  infrastructureInfrastructureRouteRoute._addFileChildren(
    infrastructureInfrastructureRouteRouteChildren,
  )

interface settingsSettingsLatticeRouteRouteChildren {
  settingsSettingsLatticeLatticeKeyRouteRoute: typeof settingsSettingsLatticeLatticeKeyRouteRoute
}

const settingsSettingsLatticeRouteRouteChildren: settingsSettingsLatticeRouteRouteChildren =
  {
    settingsSettingsLatticeLatticeKeyRouteRoute:
      settingsSettingsLatticeLatticeKeyRouteRoute,
  }

const settingsSettingsLatticeRouteRouteWithChildren =
  settingsSettingsLatticeRouteRoute._addFileChildren(
    settingsSettingsLatticeRouteRouteChildren,
  )

interface settingsSettingsRouteRouteChildren {
  settingsSettingsLatticeRouteRoute: typeof settingsSettingsLatticeRouteRouteWithChildren
}

const settingsSettingsRouteRouteChildren: settingsSettingsRouteRouteChildren = {
  settingsSettingsLatticeRouteRoute:
    settingsSettingsLatticeRouteRouteWithChildren,
}

const settingsSettingsRouteRouteWithChildren =
  settingsSettingsRouteRoute._addFileChildren(
    settingsSettingsRouteRouteChildren,
  )

interface toolsToolsRouteRouteChildren {
  toolsToolsLatticeTesterRouteRoute: typeof toolsToolsLatticeTesterRouteRoute
}

const toolsToolsRouteRouteChildren: toolsToolsRouteRouteChildren = {
  toolsToolsLatticeTesterRouteRoute: toolsToolsLatticeTesterRouteRoute,
}

const toolsToolsRouteRouteWithChildren = toolsToolsRouteRoute._addFileChildren(
  toolsToolsRouteRouteChildren,
)

interface configsConfigsListRouteChildren {
  configsConfigsListIndexRouteRoute: typeof configsConfigsListIndexRouteRoute
  configsConfigsListDetailConfigNameRouteRoute: typeof configsConfigsListDetailConfigNameRouteRoute
}

const configsConfigsListRouteChildren: configsConfigsListRouteChildren = {
  configsConfigsListIndexRouteRoute: configsConfigsListIndexRouteRoute,
  configsConfigsListDetailConfigNameRouteRoute:
    configsConfigsListDetailConfigNameRouteRoute,
}

const configsConfigsListRouteWithChildren =
  configsConfigsListRoute._addFileChildren(configsConfigsListRouteChildren)

interface configsConfigsRouteChildren {
  configsConfigsListRoute: typeof configsConfigsListRouteWithChildren
}

const configsConfigsRouteChildren: configsConfigsRouteChildren = {
  configsConfigsListRoute: configsConfigsListRouteWithChildren,
}

const configsConfigsRouteWithChildren = configsConfigsRoute._addFileChildren(
  configsConfigsRouteChildren,
)

interface linksLinksListRouteChildren {
  linksLinksListIndexRouteRoute: typeof linksLinksListIndexRouteRoute
}

const linksLinksListRouteChildren: linksLinksListRouteChildren = {
  linksLinksListIndexRouteRoute: linksLinksListIndexRouteRoute,
}

const linksLinksListRouteWithChildren = linksLinksListRoute._addFileChildren(
  linksLinksListRouteChildren,
)

interface linksLinksRouteChildren {
  linksLinksListRoute: typeof linksLinksListRouteWithChildren
}

const linksLinksRouteChildren: linksLinksRouteChildren = {
  linksLinksListRoute: linksLinksListRouteWithChildren,
}

const linksLinksRouteWithChildren = linksLinksRoute._addFileChildren(
  linksLinksRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof RouteRoute
  '/applications': typeof applicationsApplicationsRouteRouteWithChildren
  '/infrastructure': typeof infrastructureInfrastructureRouteRouteWithChildren
  '/settings': typeof settingsSettingsRouteRouteWithChildren
  '/setup': typeof settingsSetupRouteRoute
  '/tools': typeof toolsToolsRouteRouteWithChildren
  '/applications/detail': typeof applicationsApplicationsDetailRouteRouteWithChildren
  '/applications/new': typeof applicationsApplicationsNewRouteRoute
  '/configs/new': typeof configsConfigsNewRouteRoute
  '/infrastructure/hosts': typeof infrastructureInfrastructureHostsRouteRouteWithChildren
  '/links/new': typeof linksLinksNewRouteRoute
  '/settings/lattice': typeof settingsSettingsLatticeRouteRouteWithChildren
  '/tools/lattice-tester': typeof toolsToolsLatticeTesterRouteRoute
  '/configs': typeof configsConfigsListRouteWithChildren
  '/links': typeof linksLinksListRouteWithChildren
  '/applications/': typeof applicationsApplicationsIndexRoute
  '/applications/detail/$appName': typeof applicationsApplicationsDetailAppNameRouteRoute
  '/applications/new/template': typeof applicationsApplicationsNewTemplateRouteRoute
  '/infrastructure/hosts/$hostId': typeof infrastructureInfrastructureHostsHostIdRouteRoute
  '/settings/lattice/$latticeKey': typeof settingsSettingsLatticeLatticeKeyRouteRoute
  '/configs/': typeof configsConfigsListIndexRouteRoute
  '/links/': typeof linksLinksListIndexRouteRoute
  '/configs/detail/$configName': typeof configsConfigsListDetailConfigNameRouteRoute
}

export interface FileRoutesByTo {
  '/': typeof RouteRoute
  '/infrastructure': typeof infrastructureInfrastructureRouteRouteWithChildren
  '/settings': typeof settingsSettingsRouteRouteWithChildren
  '/setup': typeof settingsSetupRouteRoute
  '/tools': typeof toolsToolsRouteRouteWithChildren
  '/applications/detail': typeof applicationsApplicationsDetailRouteRouteWithChildren
  '/applications/new': typeof applicationsApplicationsNewRouteRoute
  '/configs/new': typeof configsConfigsNewRouteRoute
  '/infrastructure/hosts': typeof infrastructureInfrastructureHostsRouteRouteWithChildren
  '/links/new': typeof linksLinksNewRouteRoute
  '/settings/lattice': typeof settingsSettingsLatticeRouteRouteWithChildren
  '/tools/lattice-tester': typeof toolsToolsLatticeTesterRouteRoute
  '/configs': typeof configsConfigsListIndexRouteRoute
  '/links': typeof linksLinksListIndexRouteRoute
  '/applications': typeof applicationsApplicationsIndexRoute
  '/applications/detail/$appName': typeof applicationsApplicationsDetailAppNameRouteRoute
  '/applications/new/template': typeof applicationsApplicationsNewTemplateRouteRoute
  '/infrastructure/hosts/$hostId': typeof infrastructureInfrastructureHostsHostIdRouteRoute
  '/settings/lattice/$latticeKey': typeof settingsSettingsLatticeLatticeKeyRouteRoute
  '/configs/detail/$configName': typeof configsConfigsListDetailConfigNameRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof RouteRoute
  '/(applications)/applications': typeof applicationsApplicationsRouteRouteWithChildren
  '/(infrastructure)/infrastructure': typeof infrastructureInfrastructureRouteRouteWithChildren
  '/(settings)/settings': typeof settingsSettingsRouteRouteWithChildren
  '/(settings)/setup': typeof settingsSetupRouteRoute
  '/(tools)/tools': typeof toolsToolsRouteRouteWithChildren
  '/(applications)/applications/detail': typeof applicationsApplicationsDetailRouteRouteWithChildren
  '/(applications)/applications/new': typeof applicationsApplicationsNewRouteRoute
  '/(configs)/configs/new': typeof configsConfigsNewRouteRoute
  '/(infrastructure)/infrastructure/hosts': typeof infrastructureInfrastructureHostsRouteRouteWithChildren
  '/(links)/links/new': typeof linksLinksNewRouteRoute
  '/(settings)/settings/lattice': typeof settingsSettingsLatticeRouteRouteWithChildren
  '/(tools)/tools/lattice-tester': typeof toolsToolsLatticeTesterRouteRoute
  '/(configs)/configs': typeof configsConfigsRouteWithChildren
  '/(configs)/configs/_list': typeof configsConfigsListRouteWithChildren
  '/(links)/links': typeof linksLinksRouteWithChildren
  '/(links)/links/_list': typeof linksLinksListRouteWithChildren
  '/(applications)/applications/': typeof applicationsApplicationsIndexRoute
  '/(applications)/applications/detail/$appName': typeof applicationsApplicationsDetailAppNameRouteRoute
  '/(applications)/applications/new_/template': typeof applicationsApplicationsNewTemplateRouteRoute
  '/(infrastructure)/infrastructure/hosts/$hostId': typeof infrastructureInfrastructureHostsHostIdRouteRoute
  '/(settings)/settings/lattice/$latticeKey': typeof settingsSettingsLatticeLatticeKeyRouteRoute
  '/(configs)/configs/_list/': typeof configsConfigsListIndexRouteRoute
  '/(links)/links/_list/': typeof linksLinksListIndexRouteRoute
  '/(configs)/configs/_list/detail/$configName': typeof configsConfigsListDetailConfigNameRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/applications'
    | '/infrastructure'
    | '/settings'
    | '/setup'
    | '/tools'
    | '/applications/detail'
    | '/applications/new'
    | '/configs/new'
    | '/infrastructure/hosts'
    | '/links/new'
    | '/settings/lattice'
    | '/tools/lattice-tester'
    | '/configs'
    | '/links'
    | '/applications/'
    | '/applications/detail/$appName'
    | '/applications/new/template'
    | '/infrastructure/hosts/$hostId'
    | '/settings/lattice/$latticeKey'
    | '/configs/'
    | '/links/'
    | '/configs/detail/$configName'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/infrastructure'
    | '/settings'
    | '/setup'
    | '/tools'
    | '/applications/detail'
    | '/applications/new'
    | '/configs/new'
    | '/infrastructure/hosts'
    | '/links/new'
    | '/settings/lattice'
    | '/tools/lattice-tester'
    | '/configs'
    | '/links'
    | '/applications'
    | '/applications/detail/$appName'
    | '/applications/new/template'
    | '/infrastructure/hosts/$hostId'
    | '/settings/lattice/$latticeKey'
    | '/configs/detail/$configName'
  id:
    | '__root__'
    | '/'
    | '/(applications)/applications'
    | '/(infrastructure)/infrastructure'
    | '/(settings)/settings'
    | '/(settings)/setup'
    | '/(tools)/tools'
    | '/(applications)/applications/detail'
    | '/(applications)/applications/new'
    | '/(configs)/configs/new'
    | '/(infrastructure)/infrastructure/hosts'
    | '/(links)/links/new'
    | '/(settings)/settings/lattice'
    | '/(tools)/tools/lattice-tester'
    | '/(configs)/configs'
    | '/(configs)/configs/_list'
    | '/(links)/links'
    | '/(links)/links/_list'
    | '/(applications)/applications/'
    | '/(applications)/applications/detail/$appName'
    | '/(applications)/applications/new_/template'
    | '/(infrastructure)/infrastructure/hosts/$hostId'
    | '/(settings)/settings/lattice/$latticeKey'
    | '/(configs)/configs/_list/'
    | '/(links)/links/_list/'
    | '/(configs)/configs/_list/detail/$configName'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  RouteRoute: typeof RouteRoute
  applicationsApplicationsRouteRoute: typeof applicationsApplicationsRouteRouteWithChildren
  infrastructureInfrastructureRouteRoute: typeof infrastructureInfrastructureRouteRouteWithChildren
  settingsSettingsRouteRoute: typeof settingsSettingsRouteRouteWithChildren
  settingsSetupRouteRoute: typeof settingsSetupRouteRoute
  toolsToolsRouteRoute: typeof toolsToolsRouteRouteWithChildren
  configsConfigsNewRouteRoute: typeof configsConfigsNewRouteRoute
  linksLinksNewRouteRoute: typeof linksLinksNewRouteRoute
  configsConfigsRoute: typeof configsConfigsRouteWithChildren
  linksLinksRoute: typeof linksLinksRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  RouteRoute: RouteRoute,
  applicationsApplicationsRouteRoute:
    applicationsApplicationsRouteRouteWithChildren,
  infrastructureInfrastructureRouteRoute:
    infrastructureInfrastructureRouteRouteWithChildren,
  settingsSettingsRouteRoute: settingsSettingsRouteRouteWithChildren,
  settingsSetupRouteRoute: settingsSetupRouteRoute,
  toolsToolsRouteRoute: toolsToolsRouteRouteWithChildren,
  configsConfigsNewRouteRoute: configsConfigsNewRouteRoute,
  linksLinksNewRouteRoute: linksLinksNewRouteRoute,
  configsConfigsRoute: configsConfigsRouteWithChildren,
  linksLinksRoute: linksLinksRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(applications)/applications",
        "/(infrastructure)/infrastructure",
        "/(settings)/settings",
        "/(settings)/setup",
        "/(tools)/tools",
        "/(configs)/configs/new",
        "/(links)/links/new",
        "/(configs)/configs",
        "/(links)/links"
      ]
    },
    "/": {
      "filePath": "route.tsx"
    },
    "/(applications)/applications": {
      "filePath": "(applications)/applications/route.tsx",
      "children": [
        "/(applications)/applications/detail",
        "/(applications)/applications/new",
        "/(applications)/applications/",
        "/(applications)/applications/new_/template"
      ]
    },
    "/(infrastructure)/infrastructure": {
      "filePath": "(infrastructure)/infrastructure/route.tsx",
      "children": [
        "/(infrastructure)/infrastructure/hosts"
      ]
    },
    "/(settings)/settings": {
      "filePath": "(settings)/settings/route.tsx",
      "children": [
        "/(settings)/settings/lattice"
      ]
    },
    "/(settings)/setup": {
      "filePath": "(settings)/setup/route.tsx"
    },
    "/(tools)/tools": {
      "filePath": "(tools)/tools/route.tsx",
      "children": [
        "/(tools)/tools/lattice-tester"
      ]
    },
    "/(applications)/applications/detail": {
      "filePath": "(applications)/applications/detail/route.tsx",
      "parent": "/(applications)/applications",
      "children": [
        "/(applications)/applications/detail/$appName"
      ]
    },
    "/(applications)/applications/new": {
      "filePath": "(applications)/applications/new/route.tsx",
      "parent": "/(applications)/applications"
    },
    "/(configs)/configs/new": {
      "filePath": "(configs)/configs/new/route.tsx"
    },
    "/(infrastructure)/infrastructure/hosts": {
      "filePath": "(infrastructure)/infrastructure/hosts/route.tsx",
      "parent": "/(infrastructure)/infrastructure",
      "children": [
        "/(infrastructure)/infrastructure/hosts/$hostId"
      ]
    },
    "/(links)/links/new": {
      "filePath": "(links)/links/new/route.tsx"
    },
    "/(settings)/settings/lattice": {
      "filePath": "(settings)/settings/lattice/route.tsx",
      "parent": "/(settings)/settings",
      "children": [
        "/(settings)/settings/lattice/$latticeKey"
      ]
    },
    "/(tools)/tools/lattice-tester": {
      "filePath": "(tools)/tools/lattice-tester/route.tsx",
      "parent": "/(tools)/tools"
    },
    "/(configs)/configs": {
      "filePath": "(configs)/configs",
      "children": [
        "/(configs)/configs/_list"
      ]
    },
    "/(configs)/configs/_list": {
      "filePath": "(configs)/configs/_list.tsx",
      "parent": "/(configs)/configs",
      "children": [
        "/(configs)/configs/_list/",
        "/(configs)/configs/_list/detail/$configName"
      ]
    },
    "/(links)/links": {
      "filePath": "(links)/links",
      "children": [
        "/(links)/links/_list"
      ]
    },
    "/(links)/links/_list": {
      "filePath": "(links)/links/_list.tsx",
      "parent": "/(links)/links",
      "children": [
        "/(links)/links/_list/"
      ]
    },
    "/(applications)/applications/": {
      "filePath": "(applications)/applications/index.tsx",
      "parent": "/(applications)/applications"
    },
    "/(applications)/applications/detail/$appName": {
      "filePath": "(applications)/applications/detail/$appName.route.tsx",
      "parent": "/(applications)/applications/detail"
    },
    "/(applications)/applications/new_/template": {
      "filePath": "(applications)/applications/new_.template/route.tsx",
      "parent": "/(applications)/applications"
    },
    "/(infrastructure)/infrastructure/hosts/$hostId": {
      "filePath": "(infrastructure)/infrastructure/hosts/$hostId.route.tsx",
      "parent": "/(infrastructure)/infrastructure/hosts"
    },
    "/(settings)/settings/lattice/$latticeKey": {
      "filePath": "(settings)/settings/lattice/$latticeKey.route.tsx",
      "parent": "/(settings)/settings/lattice"
    },
    "/(configs)/configs/_list/": {
      "filePath": "(configs)/configs/_list.index.route.tsx",
      "parent": "/(configs)/configs/_list"
    },
    "/(links)/links/_list/": {
      "filePath": "(links)/links/_list.index.route.tsx",
      "parent": "/(links)/links/_list"
    },
    "/(configs)/configs/_list/detail/$configName": {
      "filePath": "(configs)/configs/_list.detail.$configName/route.tsx",
      "parent": "/(configs)/configs/_list"
    }
  }
}
ROUTE_MANIFEST_END */
