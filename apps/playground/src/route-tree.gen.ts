/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './app/__root'
import { Route as RouteImport } from './app/route'
import { Route as toolsToolsRouteImport } from './app/(tools)/tools/route'
import { Route as settingsSetupRouteImport } from './app/(settings)/setup/route'
import { Route as settingsSettingsRouteImport } from './app/(settings)/settings/route'
import { Route as linksLinksRouteImport } from './app/(links)/links/route'
import { Route as infrastructureInfrastructureRouteImport } from './app/(infrastructure)/infrastructure/route'
import { Route as configsConfigsRouteImport } from './app/(configs)/configs/route'
import { Route as applicationsApplicationsRouteImport } from './app/(applications)/applications/route'
import { Route as applicationsApplicationsIndexImport } from './app/(applications)/applications/index'
import { Route as toolsToolsLatticeTesterRouteImport } from './app/(tools)/tools/lattice-tester/route'
import { Route as settingsSettingsLatticeRouteImport } from './app/(settings)/settings/lattice/route'
import { Route as infrastructureInfrastructureHostsRouteImport } from './app/(infrastructure)/infrastructure/hosts/route'
import { Route as applicationsApplicationsNewRouteImport } from './app/(applications)/applications/new/route'
import { Route as applicationsApplicationsDetailRouteImport } from './app/(applications)/applications/detail/route'
import { Route as settingsSettingsLatticeIndexRouteImport } from './app/(settings)/settings/lattice/index.route'
import { Route as settingsSettingsLatticeLatticeRouteImport } from './app/(settings)/settings/lattice/$lattice/route'
import { Route as infrastructureInfrastructureHostsHostIdRouteImport } from './app/(infrastructure)/infrastructure/hosts/$hostId.route'
import { Route as applicationsApplicationsNewTemplateRouteImport } from './app/(applications)/applications/new_.template/route'
import { Route as applicationsApplicationsDetailAppNameRouteImport } from './app/(applications)/applications/detail/$appName.route'

// Create/Update Routes

const RouteRoute = RouteImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const toolsToolsRouteRoute = toolsToolsRouteImport.update({
  path: '/tools',
  getParentRoute: () => rootRoute,
} as any)

const settingsSetupRouteRoute = settingsSetupRouteImport.update({
  path: '/setup',
  getParentRoute: () => rootRoute,
} as any)

const settingsSettingsRouteRoute = settingsSettingsRouteImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const linksLinksRouteRoute = linksLinksRouteImport.update({
  path: '/links',
  getParentRoute: () => rootRoute,
} as any)

const infrastructureInfrastructureRouteRoute =
  infrastructureInfrastructureRouteImport.update({
    path: '/infrastructure',
    getParentRoute: () => rootRoute,
  } as any)

const configsConfigsRouteRoute = configsConfigsRouteImport.update({
  path: '/configs',
  getParentRoute: () => rootRoute,
} as any)

const applicationsApplicationsRouteRoute = applicationsApplicationsRouteImport
  .update({
    path: '/applications',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() =>
    import('./app/(applications)/applications/route.lazy').then((d) => d.Route),
  )

const applicationsApplicationsIndexRoute = applicationsApplicationsIndexImport
  .update({
    path: '/',
    getParentRoute: () => applicationsApplicationsRouteRoute,
  } as any)
  .lazy(() =>
    import('./app/(applications)/applications/index.lazy').then((d) => d.Route),
  )

const toolsToolsLatticeTesterRouteRoute = toolsToolsLatticeTesterRouteImport
  .update({
    path: '/lattice-tester',
    getParentRoute: () => toolsToolsRouteRoute,
  } as any)
  .lazy(() =>
    import('./app/(tools)/tools/lattice-tester/route.lazy').then(
      (d) => d.Route,
    ),
  )

const settingsSettingsLatticeRouteRoute =
  settingsSettingsLatticeRouteImport.update({
    path: '/lattice',
    getParentRoute: () => settingsSettingsRouteRoute,
  } as any)

const infrastructureInfrastructureHostsRouteRoute =
  infrastructureInfrastructureHostsRouteImport
    .update({
      path: '/hosts',
      getParentRoute: () => infrastructureInfrastructureRouteRoute,
    } as any)
    .lazy(() =>
      import('./app/(infrastructure)/infrastructure/hosts/route.lazy').then(
        (d) => d.Route,
      ),
    )

const applicationsApplicationsNewRouteRoute =
  applicationsApplicationsNewRouteImport
    .update({
      path: '/new',
      getParentRoute: () => applicationsApplicationsRouteRoute,
    } as any)
    .lazy(() =>
      import('./app/(applications)/applications/new/route.lazy').then(
        (d) => d.Route,
      ),
    )

const applicationsApplicationsDetailRouteRoute =
  applicationsApplicationsDetailRouteImport.update({
    path: '/detail',
    getParentRoute: () => applicationsApplicationsRouteRoute,
  } as any)

const settingsSettingsLatticeIndexRouteRoute =
  settingsSettingsLatticeIndexRouteImport
    .update({
      path: '/',
      getParentRoute: () => settingsSettingsLatticeRouteRoute,
    } as any)
    .lazy(() =>
      import('./app/(settings)/settings/lattice/index.lazy').then(
        (d) => d.Route,
      ),
    )

const settingsSettingsLatticeLatticeRouteRoute =
  settingsSettingsLatticeLatticeRouteImport.update({
    path: '/$lattice',
    getParentRoute: () => settingsSettingsLatticeRouteRoute,
  } as any)

const infrastructureInfrastructureHostsHostIdRouteRoute =
  infrastructureInfrastructureHostsHostIdRouteImport
    .update({
      path: '/$hostId',
      getParentRoute: () => infrastructureInfrastructureHostsRouteRoute,
    } as any)
    .lazy(() =>
      import(
        './app/(infrastructure)/infrastructure/hosts/$hostId.route.lazy'
      ).then((d) => d.Route),
    )

const applicationsApplicationsNewTemplateRouteRoute =
  applicationsApplicationsNewTemplateRouteImport
    .update({
      path: '/new/template',
      getParentRoute: () => applicationsApplicationsRouteRoute,
    } as any)
    .lazy(() =>
      import('./app/(applications)/applications/new_.template/route.lazy').then(
        (d) => d.Route,
      ),
    )

const applicationsApplicationsDetailAppNameRouteRoute =
  applicationsApplicationsDetailAppNameRouteImport
    .update({
      path: '/$appName',
      getParentRoute: () => applicationsApplicationsDetailRouteRoute,
    } as any)
    .lazy(() =>
      import('./app/(applications)/applications/detail/$appName.lazy').then(
        (d) => d.Route,
      ),
    )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RouteImport
      parentRoute: typeof rootRoute
    }
    '/(applications)/applications': {
      id: '/applications'
      path: '/applications'
      fullPath: '/applications'
      preLoaderRoute: typeof applicationsApplicationsRouteImport
      parentRoute: typeof rootRoute
    }
    '/(configs)/configs': {
      id: '/configs'
      path: '/configs'
      fullPath: '/configs'
      preLoaderRoute: typeof configsConfigsRouteImport
      parentRoute: typeof rootRoute
    }
    '/(infrastructure)/infrastructure': {
      id: '/infrastructure'
      path: '/infrastructure'
      fullPath: '/infrastructure'
      preLoaderRoute: typeof infrastructureInfrastructureRouteImport
      parentRoute: typeof rootRoute
    }
    '/(links)/links': {
      id: '/links'
      path: '/links'
      fullPath: '/links'
      preLoaderRoute: typeof linksLinksRouteImport
      parentRoute: typeof rootRoute
    }
    '/(settings)/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof settingsSettingsRouteImport
      parentRoute: typeof rootRoute
    }
    '/(settings)/setup': {
      id: '/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof settingsSetupRouteImport
      parentRoute: typeof rootRoute
    }
    '/(tools)/tools': {
      id: '/tools'
      path: '/tools'
      fullPath: '/tools'
      preLoaderRoute: typeof toolsToolsRouteImport
      parentRoute: typeof rootRoute
    }
    '/(applications)/applications/detail': {
      id: '/applications/detail'
      path: '/detail'
      fullPath: '/applications/detail'
      preLoaderRoute: typeof applicationsApplicationsDetailRouteImport
      parentRoute: typeof applicationsApplicationsRouteImport
    }
    '/(applications)/applications/new': {
      id: '/applications/new'
      path: '/new'
      fullPath: '/applications/new'
      preLoaderRoute: typeof applicationsApplicationsNewRouteImport
      parentRoute: typeof applicationsApplicationsRouteImport
    }
    '/(infrastructure)/infrastructure/hosts': {
      id: '/infrastructure/hosts'
      path: '/hosts'
      fullPath: '/infrastructure/hosts'
      preLoaderRoute: typeof infrastructureInfrastructureHostsRouteImport
      parentRoute: typeof infrastructureInfrastructureRouteImport
    }
    '/(settings)/settings/lattice': {
      id: '/settings/lattice'
      path: '/lattice'
      fullPath: '/settings/lattice'
      preLoaderRoute: typeof settingsSettingsLatticeRouteImport
      parentRoute: typeof settingsSettingsRouteImport
    }
    '/(tools)/tools/lattice-tester': {
      id: '/tools/lattice-tester'
      path: '/lattice-tester'
      fullPath: '/tools/lattice-tester'
      preLoaderRoute: typeof toolsToolsLatticeTesterRouteImport
      parentRoute: typeof toolsToolsRouteImport
    }
    '/(applications)/applications/': {
      id: '/applications/'
      path: '/'
      fullPath: '/applications/'
      preLoaderRoute: typeof applicationsApplicationsIndexImport
      parentRoute: typeof applicationsApplicationsRouteImport
    }
    '/(applications)/applications/detail/$appName': {
      id: '/applications/detail/$appName'
      path: '/$appName'
      fullPath: '/applications/detail/$appName'
      preLoaderRoute: typeof applicationsApplicationsDetailAppNameRouteImport
      parentRoute: typeof applicationsApplicationsDetailRouteImport
    }
    '/(applications)/applications/new/template': {
      id: '/applications/new/template'
      path: '/new/template'
      fullPath: '/applications/new/template'
      preLoaderRoute: typeof applicationsApplicationsNewTemplateRouteImport
      parentRoute: typeof applicationsApplicationsRouteImport
    }
    '/(infrastructure)/infrastructure/hosts/$hostId': {
      id: '/infrastructure/hosts/$hostId'
      path: '/$hostId'
      fullPath: '/infrastructure/hosts/$hostId'
      preLoaderRoute: typeof infrastructureInfrastructureHostsHostIdRouteImport
      parentRoute: typeof infrastructureInfrastructureHostsRouteImport
    }
    '/(settings)/settings/lattice/$lattice': {
      id: '/settings/lattice/$lattice'
      path: '/$lattice'
      fullPath: '/settings/lattice/$lattice'
      preLoaderRoute: typeof settingsSettingsLatticeLatticeRouteImport
      parentRoute: typeof settingsSettingsLatticeRouteImport
    }
    '/(settings)/settings/lattice/': {
      id: '/settings/lattice/'
      path: '/'
      fullPath: '/settings/lattice/'
      preLoaderRoute: typeof settingsSettingsLatticeIndexRouteImport
      parentRoute: typeof settingsSettingsLatticeRouteImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  RouteRoute,
  applicationsApplicationsRouteRoute:
    applicationsApplicationsRouteRoute.addChildren({
      applicationsApplicationsDetailRouteRoute:
        applicationsApplicationsDetailRouteRoute.addChildren({
          applicationsApplicationsDetailAppNameRouteRoute,
        }),
      applicationsApplicationsNewRouteRoute,
      applicationsApplicationsIndexRoute,
      applicationsApplicationsNewTemplateRouteRoute,
    }),
  configsConfigsRouteRoute,
  infrastructureInfrastructureRouteRoute:
    infrastructureInfrastructureRouteRoute.addChildren({
      infrastructureInfrastructureHostsRouteRoute:
        infrastructureInfrastructureHostsRouteRoute.addChildren({
          infrastructureInfrastructureHostsHostIdRouteRoute,
        }),
    }),
  linksLinksRouteRoute,
  settingsSettingsRouteRoute: settingsSettingsRouteRoute.addChildren({
    settingsSettingsLatticeRouteRoute:
      settingsSettingsLatticeRouteRoute.addChildren({
        settingsSettingsLatticeLatticeRouteRoute,
        settingsSettingsLatticeIndexRouteRoute,
      }),
  }),
  settingsSetupRouteRoute,
  toolsToolsRouteRoute: toolsToolsRouteRoute.addChildren({
    toolsToolsLatticeTesterRouteRoute,
  }),
})

/* prettier-ignore-end */
