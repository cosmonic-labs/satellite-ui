/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './app/__root'
import { Route as RouteImport } from './app/route'
import { Route as toolsToolsRouteImport } from './app/(tools)/tools/route'
import { Route as setupSetupRouteImport } from './app/(setup)/setup/route'
import { Route as infrastructureInfrastructureRouteImport } from './app/(infrastructure)/infrastructure/route'
import { Route as applicationsApplicationsRouteImport } from './app/(applications)/applications/route'
import { Route as applicationsApplicationsIndexImport } from './app/(applications)/applications/index'
import { Route as toolsToolsLatticeTesterRouteImport } from './app/(tools)/tools/lattice-tester/route'
import { Route as infrastructureInfrastructureHostsRouteImport } from './app/(infrastructure)/infrastructure/hosts/route'
import { Route as applicationsApplicationsNewRouteImport } from './app/(applications)/applications/new/route'
import { Route as applicationsApplicationsDetailRouteImport } from './app/(applications)/applications/detail/route'
import { Route as infrastructureInfrastructureHostsHostIdRouteImport } from './app/(infrastructure)/infrastructure/hosts/$hostId.route'
import { Route as applicationsApplicationsNewTemplateRouteImport } from './app/(applications)/applications/new_.template/route'
import { Route as applicationsApplicationsDetailAppNameRouteImport } from './app/(applications)/applications/detail/$appName.route'

// Create/Update Routes

const RouteRoute = RouteImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const toolsToolsRouteRoute = toolsToolsRouteImport.update({
  path: '/tools',
  getParentRoute: () => rootRoute,
} as any)

const setupSetupRouteRoute = setupSetupRouteImport.update({
  path: '/setup',
  getParentRoute: () => rootRoute,
} as any)

const infrastructureInfrastructureRouteRoute =
  infrastructureInfrastructureRouteImport.update({
    path: '/infrastructure',
    getParentRoute: () => rootRoute,
  } as any)

const applicationsApplicationsRouteRoute = applicationsApplicationsRouteImport
  .update({
    path: '/applications',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() =>
    import('./app/(applications)/applications/route.lazy').then((d) => d.Route),
  )

const applicationsApplicationsIndexRoute = applicationsApplicationsIndexImport
  .update({
    path: '/',
    getParentRoute: () => applicationsApplicationsRouteRoute,
  } as any)
  .lazy(() =>
    import('./app/(applications)/applications/index.lazy').then((d) => d.Route),
  )

const toolsToolsLatticeTesterRouteRoute = toolsToolsLatticeTesterRouteImport
  .update({
    path: '/lattice-tester',
    getParentRoute: () => toolsToolsRouteRoute,
  } as any)
  .lazy(() =>
    import('./app/(tools)/tools/lattice-tester/route.lazy').then(
      (d) => d.Route,
    ),
  )

const infrastructureInfrastructureHostsRouteRoute =
  infrastructureInfrastructureHostsRouteImport
    .update({
      path: '/hosts',
      getParentRoute: () => infrastructureInfrastructureRouteRoute,
    } as any)
    .lazy(() =>
      import('./app/(infrastructure)/infrastructure/hosts/route.lazy').then(
        (d) => d.Route,
      ),
    )

const applicationsApplicationsNewRouteRoute =
  applicationsApplicationsNewRouteImport
    .update({
      path: '/new',
      getParentRoute: () => applicationsApplicationsRouteRoute,
    } as any)
    .lazy(() =>
      import('./app/(applications)/applications/new/route.lazy').then(
        (d) => d.Route,
      ),
    )

const applicationsApplicationsDetailRouteRoute =
  applicationsApplicationsDetailRouteImport.update({
    path: '/detail',
    getParentRoute: () => applicationsApplicationsRouteRoute,
  } as any)

const infrastructureInfrastructureHostsHostIdRouteRoute =
  infrastructureInfrastructureHostsHostIdRouteImport
    .update({
      path: '/$hostId',
      getParentRoute: () => infrastructureInfrastructureHostsRouteRoute,
    } as any)
    .lazy(() =>
      import(
        './app/(infrastructure)/infrastructure/hosts/$hostId.route.lazy'
      ).then((d) => d.Route),
    )

const applicationsApplicationsNewTemplateRouteRoute =
  applicationsApplicationsNewTemplateRouteImport
    .update({
      path: '/new/template',
      getParentRoute: () => applicationsApplicationsRouteRoute,
    } as any)
    .lazy(() =>
      import('./app/(applications)/applications/new_.template/route.lazy').then(
        (d) => d.Route,
      ),
    )

const applicationsApplicationsDetailAppNameRouteRoute =
  applicationsApplicationsDetailAppNameRouteImport
    .update({
      path: '/$appName',
      getParentRoute: () => applicationsApplicationsDetailRouteRoute,
    } as any)
    .lazy(() =>
      import('./app/(applications)/applications/detail/$appName.lazy').then(
        (d) => d.Route,
      ),
    )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof RouteImport
      parentRoute: typeof rootRoute
    }
    '/(applications)/applications': {
      preLoaderRoute: typeof applicationsApplicationsRouteImport
      parentRoute: typeof rootRoute
    }
    '/(infrastructure)/infrastructure': {
      preLoaderRoute: typeof infrastructureInfrastructureRouteImport
      parentRoute: typeof rootRoute
    }
    '/(setup)/setup': {
      preLoaderRoute: typeof setupSetupRouteImport
      parentRoute: typeof rootRoute
    }
    '/(tools)/tools': {
      preLoaderRoute: typeof toolsToolsRouteImport
      parentRoute: typeof rootRoute
    }
    '/(applications)/applications/detail': {
      preLoaderRoute: typeof applicationsApplicationsDetailRouteImport
      parentRoute: typeof applicationsApplicationsRouteImport
    }
    '/(applications)/applications/new': {
      preLoaderRoute: typeof applicationsApplicationsNewRouteImport
      parentRoute: typeof applicationsApplicationsRouteImport
    }
    '/(infrastructure)/infrastructure/hosts': {
      preLoaderRoute: typeof infrastructureInfrastructureHostsRouteImport
      parentRoute: typeof infrastructureInfrastructureRouteImport
    }
    '/(tools)/tools/lattice-tester': {
      preLoaderRoute: typeof toolsToolsLatticeTesterRouteImport
      parentRoute: typeof toolsToolsRouteImport
    }
    '/(applications)/applications/': {
      preLoaderRoute: typeof applicationsApplicationsIndexImport
      parentRoute: typeof applicationsApplicationsRouteImport
    }
    '/(applications)/applications/detail/$appName': {
      preLoaderRoute: typeof applicationsApplicationsDetailAppNameRouteImport
      parentRoute: typeof applicationsApplicationsDetailRouteImport
    }
    '/(applications)/applications/new/template': {
      preLoaderRoute: typeof applicationsApplicationsNewTemplateRouteImport
      parentRoute: typeof applicationsApplicationsRouteImport
    }
    '/(infrastructure)/infrastructure/hosts/$hostId': {
      preLoaderRoute: typeof infrastructureInfrastructureHostsHostIdRouteImport
      parentRoute: typeof infrastructureInfrastructureHostsRouteImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  RouteRoute,
  applicationsApplicationsRouteRoute.addChildren([
    applicationsApplicationsDetailRouteRoute.addChildren([
      applicationsApplicationsDetailAppNameRouteRoute,
    ]),
    applicationsApplicationsNewRouteRoute,
    applicationsApplicationsIndexRoute,
    applicationsApplicationsNewTemplateRouteRoute,
  ]),
  infrastructureInfrastructureRouteRoute.addChildren([
    infrastructureInfrastructureHostsRouteRoute.addChildren([
      infrastructureInfrastructureHostsHostIdRouteRoute,
    ]),
  ]),
  setupSetupRouteRoute,
  toolsToolsRouteRoute.addChildren([toolsToolsLatticeTesterRouteRoute]),
])

/* prettier-ignore-end */
